#include <node.hh>
node::node(void) {
    this->_references=0U;
    this->_parent=NULL;
}
node::node(const node &_node) {
    this->_references=_node._references;
    this->_parent=_node._parent;
    this->_children=_node._children;
    this->_mutations=_node._mutations;
}
node& node::operator=(const node &_node) {
    this->_references=_node._references;
    this->_parent=_node._parent;
    this->_children=_node._children;
    this->_mutations=_node._mutations;
    return(*this);
}
node::~node(void) {
    this->_parent=NULL;
    this->_mutations.clear();
    std::for_each(this->_children.begin(),this->_children.end(),[](node* &_node)->void {delete _node;});
}
void node::insert(node* &_node) {
    this->_children.push_back(_node);
}
void node::remove(node* _node) {
	 if(_node->children().empty()){
    auto target=std::find(this->_children.begin(),this->_children.end(),_node);
    delete *target;
    this->_children.erase(target);

    if(!this->references()) {
        if(this->children().empty())
            this->parent()->remove(this);
        else if(this->children().size()==1U) {
            if(this->parent()){
					this->children()[0]->mutations().insert(this->children()[0]->mutations().begin(),this->mutations().begin(),this->mutations().end());
               this->parent()->insert(this->children()[0]);
               this->children()[0]->parent(this->parent());
               this->children().pop_back();
               this->remove();
            }
            else
               this->children()[0]->mutations().clear();
        }
    }
	 }
}
void node::remove(void) {
    this->_parent->remove(this);
}
void node::parent(node* &_parent) {
    this->_parent=_parent;
}
node*& node::parent(void) {
    return(this->_parent);
}
void node::increase(void) {
    this->_references++;
}
void node::clear(void) {
    this->_references=0U;
    this->_mutations.clear();
}
uint32_t node::references(void) const {
    return(this->_references);
}
void node::references(const uint32_t &_references) {
    this->_references=_references;
}
void node::mutate(const uint32_t &_mutation) {
    this->_mutations.push_back(_mutation);
}
std::vector<node*>& node::children(void) {
    return(this->_children);
}
std::vector<uint32_t>& node::mutations(void) {
    return(this->_mutations);
}
json node::serialize(void){
	json document;
	
	document["references"]=this->references();
	document["mutations"]=this->mutations();
	
	if(!this->children().empty()){
		for(auto child : this->children())
			document["children"].push_back(child->serialize());
	}
	return(document);
}
